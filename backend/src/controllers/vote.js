const Vote = require('../models/vote');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const mysql = require('../config/db');
const User = require("../models/user");

const axios = require("axios")
const http = axios.create({
    baseURL: "https://api.starton.io/v2",
    headers: {
        "x-api-key": process.env.STARTON_API_KEY,
    },
})

function isEmpty(body) {
    for (const key in body) {
        if (Object.hasOwnProperty.call(body, key)) {
            if (body[key].length === 0) {
                return false;
            }
        }
    }
    return true;
};

exports.getVoteOfWallet = (req, res, next) => {
    const wallet = req.params.wallet;
    let content = [];
    User.findByWallet(wallet, function(err, user) {
        if (err) {
            res.status(500).json({ msg: "internal server error"});
        } else {
            if (user.length === 0) return res.status(404).json({ msg: "Not found"});
            const usersID = user[0].id;

            mysql.query("SELECT `voteID` FROM `link` WHERE `userID`=" + usersID, function (err, email) {
                for (let i = 0; i < email.length; i ++) {
                    mysql.query("SELECT `eventName`, `end` FROM `vote` WHERE `eventID`=" + email[i].voteID, function (err, r) {
                        content.push(r[0]);
                        if (i + 1 === email.length)
                            res.json({
                                msg: content
                            })
                    });
                }
            });

        }
    });
}

exports.signup = (req, res, next) => {
    const validInput = isEmpty(req.body);
    if (!validInput) return res.status(400).json({ msg: "please provide all fields"});
    const newVote = new Vote({
        name: req.body.name,
        participant: req.body.participant,
        end: req.body.end
    });
    Vote.create(newVote, function(err, user) {

        if (err) {
            if (err.errno === 1062) {
                res.status(403).json({ msg: "vote already exists"});
            } else if (err.errno === 1048) {
                res.status(400).json({ msg: "please provide all fields"});
            } else {
                res.status(500).json({ msg: "internal server error"});
            }
        } else {
            res.status(201).json({
                message: "Success, Event was created !"
            });
        }
    });
    http.post('/smart-contract/from-bytecode', {
        "network": "polygon-mainnet",
        "name": "Your_Vote contract",
        "description": "For the Hackathon !",
        "params": [ // parameter values for the smart contract constructors, this will change depending of your contract
            req.body.candidate,
            newVote.end,
            req.body.result
        ],
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "string[]",
                        "name": "proposalNames",
                        "type": "string[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "endDate",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bool",
                        "name": "resultBeforeEnd",
                        "type": "bool"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "inputs": [],
                "name": "_endDate",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "_owner",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "_resultBeforeEnd",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "_spec",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "_startDate",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getProposalsPoints",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "string",
                                "name": "name",
                                "type": "string"
                            },
                            {
                                "internalType": "uint256",
                                "name": "voteCount",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct Ballot.Proposal[]",
                        "name": "",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "addr",
                        "type": "address"
                    }
                ],
                "name": "hasAlreadyVoted",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "isFinished",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "string",
                        "name": "proposal",
                        "type": "string"
                    }
                ],
                "name": "vote",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],// Paste here the abi you copied to clipboard
        "bytecode": '0x60806040523480156200001157600080fd5b506040516200142738038062001427833981810160405281019062000037919062000381565b828282828282336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002819055504260018190555080600060146101000a81548160ff02191690831515021790555060008060156101000a81548160ff02191690831515021790555060005b83518110156200018f576004604051806040016040528086848151811062000113577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181526020016000815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190805190602001906200016c9291906200019f565b506020820151816001015550508080620001869062000508565b915050620000c2565b5050505050505050505062000617565b828054620001ad90620004d2565b90600052602060002090601f016020900481019282620001d157600085556200021d565b82601f10620001ec57805160ff19168380011785556200021d565b828001600101855582156200021d579182015b828111156200021c578251825591602001919060010190620001ff565b5b5090506200022c919062000230565b5090565b5b808211156200024b57600081600090555060010162000231565b5090565b600062000266620002608462000424565b620003f0565b9050808382526020820190508260005b85811015620002aa57815185016200028f88826200033d565b84526020840193506020830192505060018101905062000276565b5050509392505050565b6000620002cb620002c58462000453565b620003f0565b905082815260208101848484011115620002e457600080fd5b620002f18482856200049c565b509392505050565b600082601f8301126200030b57600080fd5b81516200031d8482602086016200024f565b91505092915050565b6000815190506200033781620005e3565b92915050565b600082601f8301126200034f57600080fd5b815162000361848260208601620002b4565b91505092915050565b6000815190506200037b81620005fd565b92915050565b6000806000606084860312156200039757600080fd5b600084015167ffffffffffffffff811115620003b257600080fd5b620003c086828701620002f9565b9350506020620003d3868287016200036a565b9250506040620003e68682870162000326565b9150509250925092565b6000604051905081810181811067ffffffffffffffff821117156200041a5762000419620005b4565b5b8060405250919050565b600067ffffffffffffffff821115620004425762000441620005b4565b5b602082029050602081019050919050565b600067ffffffffffffffff821115620004715762000470620005b4565b5b601f19601f8301169050602081019050919050565b60008115159050919050565b6000819050919050565b60005b83811015620004bc5780820151818401526020810190506200049f565b83811115620004cc576000848401525b50505050565b60006002820490506001821680620004eb57607f821691505b6020821081141562000502576200050162000585565b5b50919050565b6000620005158262000492565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200054b576200054a62000556565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620005ee8162000486565b8114620005fa57600080fd5b50565b620006088162000492565b81146200061457600080fd5b50565b610e0080620006276000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638574d5b0116100665780638574d5b014610110578063ac8daba014610140578063b2bdfa7b1461015e578063dbfa58631461017c578063fc36e15b1461019a57610093565b8063011c5a6b1461009857806309a20138146100b657806324eafb1a146100d45780637b352962146100f2575b600080fd5b6100a06101b6565b6040516100ad9190610a5b565b60405180910390f35b6100be6103d1565b6040516100cb9190610a7d565b60405180910390f35b6100dc6103e4565b6040516100e99190610a7d565b60405180910390f35b6100fa6103f7565b6040516101079190610a7d565b60405180910390f35b61012a6004803603810190610125919061079f565b610414565b6040516101379190610a7d565b60405180910390f35b6101486104ec565b6040516101559190610ab8565b60405180910390f35b6101666104f2565b6040516101739190610a40565b60405180910390f35b610184610516565b6040516101919190610ab8565b60405180910390f35b6101b460048036038101906101af91906107c8565b61051c565b005b6060600060149054906101000a900460ff16156102c8576004805480602002602001604051908101604052809291908181526020016000905b828210156102bd578382906000526020600020906002020160405180604001604052908160008201805461022290610c9a565b80601f016020809104026020016040519081016040528092919081815260200182805461024e90610c9a565b801561029b5780601f106102705761010080835404028352916020019161029b565b820191906000526020600020905b81548152906001019060200180831161027e57829003601f168201915b50505050508152602001600182015481525050815260200190600101906101ef565b5050505090506103ce565b6002544211156103cd576004805480602002602001604051908101604052809291908181526020016000905b828210156103c2578382906000526020600020906002020160405180604001604052908160008201805461032790610c9a565b80601f016020809104026020016040519081016040528092919081815260200182805461035390610c9a565b80156103a05780601f10610375576101008083540402835291602001916103a0565b820191906000526020600020905b81548152906001019060200180831161038357829003601f168201915b50505050508152602001600182015481525050815260200190600101906102f4565b5050505090506103ce565b5b90565b600060159054906101000a900460ff1681565b600060149054906101000a900460ff1681565b600060025442111561040c5760019050610411565b600090505b90565b600080600090505b6003805490508110156104e1578273ffffffffffffffffffffffffffffffffffffffff166003828154811061047a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156104ce5760019150506104e7565b80806104d990610ccc565b91505061041c565b50600090505b919050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6000151561052933610414565b15151461056b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056290610a98565b60405180910390fd5b60005b600480549050811015610660578180519060200120600482815481106105bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016000016040516105db9190610a29565b6040518091039020141561064d57600160048281548110610625577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160010160008282546106459190610bba565b925050819055505b808061065890610ccc565b91505061056e565b50600360405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600115158152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908315150217905550505050565b600061073561073084610b04565b610ad3565b90508281526020810184848401111561074d57600080fd5b610758848285610c58565b509392505050565b60008135905061076f81610db3565b92915050565b600082601f83011261078657600080fd5b8135610796848260208601610722565b91505092915050565b6000602082840312156107b157600080fd5b60006107bf84828501610760565b91505092915050565b6000602082840312156107da57600080fd5b600082013567ffffffffffffffff8111156107f457600080fd5b61080084828501610775565b91505092915050565b600061081583836109ce565b905092915050565b61082681610c10565b82525050565b600061083782610b59565b6108418185610b7c565b93508360208202850161085385610b34565b8060005b8581101561088f57848403895281516108708582610809565b945061087b83610b6f565b925060208a01995050600181019050610857565b50829750879550505050505092915050565b6108aa81610c22565b82525050565b600081546108bd81610c9a565b6108c78186610b8d565b945060018216600081146108e257600181146108f357610926565b60ff19831686528186019350610926565b6108fc85610b44565b60005b8381101561091e578154818901526001820191506020810190506108ff565b838801955050505b50505092915050565b600061093a82610b64565b6109448185610b98565b9350610954818560208601610c67565b61095d81610da2565b840191505092915050565b6000610975602783610ba9565b91507f596f75206861766520616c726561647920766f74656420696e2074686973206260008301527f616c6c6f742021000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060408301600083015184820360008601526109eb828261092f565b9150506020830151610a006020860182610a0b565b508091505092915050565b610a1481610c4e565b82525050565b610a2381610c4e565b82525050565b6000610a3582846108b0565b915081905092915050565b6000602082019050610a55600083018461081d565b92915050565b60006020820190508181036000830152610a75818461082c565b905092915050565b6000602082019050610a9260008301846108a1565b92915050565b60006020820190508181036000830152610ab181610968565b9050919050565b6000602082019050610acd6000830184610a1a565b92915050565b6000604051905081810181811067ffffffffffffffff82111715610afa57610af9610d73565b5b8060405250919050565b600067ffffffffffffffff821115610b1f57610b1e610d73565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610bc582610c4e565b9150610bd083610c4e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c0557610c04610d15565b5b828201905092915050565b6000610c1b82610c2e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610c85578082015181840152602081019050610c6a565b83811115610c94576000848401525b50505050565b60006002820490506001821680610cb257607f821691505b60208210811415610cc657610cc5610d44565b5b50919050565b6000610cd782610c4e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d0a57610d09610d15565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610dbc81610c10565b8114610dc757600080fd5b5056fea2646970667358221220a382f8fced3d7fdfc46280ce2aae1184b1f60cedd469f3d40a4a7c8ce08f8eab64736f6c63430008000033',// Paste here the bytecode you copied to clipboard
        "compilerVersion": "v0.8.9+commit.e5eed63a",
        "customGas": 4700000,
        "signerWallet": "0x20D873d5014994E20B8961C6AA750dd101d75E80"
    }).then(response => {
        console.log(response.data)
    }).catch(ress => {
        console.log(ress);
        console.log([ // parameter values for the smart contract constructors, this will change depending of your contract
            req.body.candidate,
            newVote.end,
            req.body.result
        ])
    })
};
